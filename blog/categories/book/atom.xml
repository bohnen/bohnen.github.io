<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | A Project Manager's note]]></title>
  <link href="http://bohnen.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://bohnen.github.io/"/>
  <updated>2014-01-29T13:46:14+09:00</updated>
  <id>http://bohnen.github.io/</id>
  <author>
    <name><![CDATA[bohnen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ソフトウェア職人気質 ch.6]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/software-craftmanship/"/>
    <updated>2014-01-16T19:31:10+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/software-craftmanship</id>
    <content type="html"><![CDATA[<p>この章では、資格制度がソフトウェア開発に貢献するという仮定がいかに間違っているかを説明している。
資格制度の問題というより、資格制度を実施するほど堅牢な知識の基盤がない、と筆者は主張する。</p>

<p>知識の成熟は浅く、それでいて適用範囲が広すぎるため、「ソフトウェア開発」とひとくくりにした資格制度は意味がないとする。
また、そのような資格が、単に知識を知っているという以上の意味を持たないために、現実の業務で品質の向上に寄与していない点を指摘している。</p>

<!--more-->


<p></p>

<p>職人気質は、そのようなあやふやな基準によらず、個人の推薦を基盤として、すぐれた開発者を識別する。</p>

<p>では、職人気質がソフトウェアの品質にどのように貢献しているのだろうか？
「ソフトウェアの品質に貢献している」というクレジットは明確になり、信頼もできるが、しかし、実際どのような貢献なのであろうか。</p>

<h2>Memo</h2>

<ul>
<li>ソフトウェア工学の資格制度のためには、Body of Knowledgeが必要であるが、<a href="http://www.computer.org/portal/web/swebok">SWEBOK</a> を作成したACMは、資格制度化を見送っている。その理由は:

<ul>
<li> 堅牢なシステムに必要な特殊な知識を外してしまうと、そのようなシステムの開発に必要な重要な知識が排除されることになる</li>
<li> ソフトウェア開発の分野は日進月歩であり、まだまだ工学・プラクティスが成熟していない</li>
</ul>
</li>
<li>2014年現在、SWEBOKはv3のDRAFTを掲載しており、二つの認定試験のベースとなっている。状況は変わってきているのだろうか。</li>
<li>ソフトウェア職人気質は、個人の評判、個人的な推薦に着目する。ハリウッドの人材調達とおなじやり方で、ハリウッド・モデルと呼ぶ</li>
<li>ハリウッド・モデルで検索すると該当するものはなかったのだが、<a href="http://bytepawn.com/2008/07/14/the-hollywood-model-in-software-engineering/">興味深いpost</a> を見つけた</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトRuby ch.15]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/perfect-ruby-ch-dot-15/"/>
    <updated>2014-01-16T19:26:26+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/perfect-ruby-ch-dot-15</id>
    <content type="html"><![CDATA[<p>積ん読になってたパーフェクトRubyを実際にコーディングしながら読み進めてみた。
15章はコマンドラインのTodoアプリケーションの開発だ。</p>

<p>Rubyは初級レベル。awkの代わりにちょっとしたスクリプトを作成するのに使うかという程度の利用しかやってなかったので、Rubyでのアプリケーションの開発は初めて（仕事ではほとんどJavaだし）。</p>

<!--more-->


<h2>ポイント</h2>

<ul>
<li>bundlerによるgemのスケルトンの作成。gemの構造の理解</li>
<li>ActiveRecordによるDB接続と、ORMの提供</li>
<li>OptionParaserによるコマンドライン引数の解析</li>
</ul>


<p>Gemの作り方を学べたのと、OptionParaserでのサブコマンドの作り方を丁寧に書いてあって分かりやすかった。</p>

<h2>Bundler</h2>

<ul>
<li><a href="http://bundler.io/">本家サイト</a></li>
<li>bundlerはrubyのアプリケーションでのgemの依存関係を整理してくれる</li>
<li>gemのスケルトンの生成もやってくれて便利</li>
</ul>


<p>```</p>

<blockquote><p>$ bundler gem todo -b
```</p></blockquote>

<ul>
<li>設定はGemfileに記載。Gemfileから、todo.gemspecを読み込むようだ。</li>
<li>bundle execコマンドで、ruby や rakeなどのコマンドを Gemfile/todo.gemspecを読み込んだ上で実行してくれる。環境依存の情報はこの二つのファイルに書けばよく、アプリケーションコードを汚さない。</li>
<li>開発時に必要だけどプロダクションでは不要といった依存関係も書ける。</li>
</ul>


<h2>ActiveRecord</h2>

<ul>
<li><a href="http://api.rubyonrails.org/files/activerecord/README_rdoc.html">API Document</a></li>
<li>ActiveRecord::Baseを使ってDB接続の作成、テーブルの作成を実施</li>
<li>ActiveRecord::Baseを継承したクラスはテーブルに対応したモデルクラスになる。このときクラス名は単数、テーブル名は複数形というネーミングルール</li>
<li><a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">scope</a> を使って、複雑な条件をまとめた新たな検索メソッドを定義できる。
16章でview側に検索結果を引き渡すときに役立った。</li>
</ul>


<h2>OptionParser</h2>

<ul>
<li><a href="http://guides.rubyonrails.org/active_record_querying.html#copes">API Document</a></li>
<li>サブコマンドの解析はできないので、サブコマンドを解析させるときは、サブコマンド毎にOptionParserのインスタンスを作成する</li>
<li>ヘルプは opt.banner, opt.separator などのメソッドでカスタマイズできる。opt.on で解析するオプションは自動で出力されるが、サブコマンドのヘルプは自動で出力されないので、自分で組み立てて表示する必要がある。</li>
</ul>

]]></content>
  </entry>
  
</feed>
