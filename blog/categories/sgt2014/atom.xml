<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SGT2014 | A Project Manager's note]]></title>
  <link href="http://bohnen.github.io/blog/categories/sgt2014/atom.xml" rel="self"/>
  <link href="http://bohnen.github.io/"/>
  <updated>2014-01-25T23:05:32+09:00</updated>
  <id>http://bohnen.github.io/</id>
  <author>
    <name><![CDATA[bohnen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[STG2014 Scrumで売上があがるのか]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/stg2014-scrum-for-s-sales/"/>
    <updated>2014-01-16T20:23:39+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/stg2014-scrum-for-s-sales</id>
    <content type="html"><![CDATA[<p>シャノン 堀 譲治氏 の講演のメモ</p>

<!--more-->


<h2>シャノン</h2>

<ul>
<li>マーケティングプラットフォームの開発</li>
<li>キャンペーン管理のシステム</li>
<li>マーケティング管理市場(???) でトップシェア</li>
<li>毎年140%成長</li>
</ul>


<h2>Scrum導入の理由</h2>

<ul>
<li>売上に対する開発コストを徐々に減らして、営業・マーケティング費用に充てたい</li>
</ul>


<h2>Scrumのメリット</h2>

<ul>
<li>売上が早く計上できる。

<ul>
<li>SIからしてみると、顧客に売上のタイミングはゆだねられる。作成側の売上計上タイミングは、契約によって異なる。
　（イテレーション毎に売上が立たないようでは、契約としてのメリットはないかも）</li>
</ul>
</li>
<li>顧客接点の増加

<ul>
<li>頻繁なリリースは、顧客との接点を増加させる。（この発想が営業だな）</li>
</ul>
</li>
<li>人員コストの平準化

<ul>
<li>ビッグバンリリースだとテスト人員の偏りが出てしまう。</li>
<li>in-house developmentならできそう。</li>
<li>顧客がテストレポートを求めているときに、テストを平準化することが可能か?</li>
</ul>
</li>
<li>プロジェクトの中断が容易

<ul>
<li>ビッグプロジェクトの中断は実際困難</li>
<li>イテレーション毎に意思決定を導入できる。これも、受注側にとっては、厳しい条件だ。</li>
<li>失敗プロジェクトを止めるというよりは、より儲かるプロジェクトに投資する</li>
</ul>
</li>
</ul>


<h2>事業の失敗</h2>

<ul>
<li>開発、役員、営業・マーケ。開発で決まることは殆どない（開発のコスト超過、機能未達がクリティカルになることはない）</li>
</ul>


<h2>POの失敗</h2>

<ol>
<li><p>顧客課題にフォーカスしていない
 課題が何かを把握するのは難しい。ついつい機能の話をしがち。機能で合意をとるのではなく、やりたいことで合意をとる。
 基本設計というフェーズは完全に顧客にとって意味がないものとなっていないだろうか。
 顧客が欲しいもの = 要件と、機能のトレースができなければ、顧客に基本設計をレビューしてもらうことはできっこない。</p></li>
<li><p>声の大きい顧客を優先してしまう。</p></li>
<li><p>優先度の決め方に責任感がない。決めた優先度に誰も責任をとらない。
 意思決定と責任は表裏一体。多数決による決定では、責任を負わなくなってしまう。やはりリスクをとってリターンをとるという姿勢を持つ人が責任を持たなければ。</p></li>
<li><p>収益シナリオを把握していない</p></li>
<li><p>顧客の導入障壁を理解していない
 製品を使うための障壁（トレーニング、使い安さ、マニュアル、システム移行）に気が回らない。企画段階に盛り込めていない</p></li>
<li><p>開発は管理しているのに、企画は管理していない
 プロジェクトの企画も開発並みにキッチリしなければいけない。すぐオーバーコミットに。
 SIでいえば、企画書、提案書なので、そのプロセスは重要だ。企画書をどう書くか、都度、同じことの繰り返しは嫌だな。
 前提条件や、非機能要件のテンプレート化、進捗や体制の前提を整理しておきたい。企画書に盛り込めるだけ盛り込め！</p></li>
<li><p>技術的負債を無視している
 技術的負債のメリットをどうとらえるかという問題。 <strong> 一定量をリファクタリングとして確保する。</strong>
 リファクタリングだけのプロジェクトはやらない。</p></li>
</ol>


<p>プロダクトバックログはPOが確認して、腹落ちしてからバックログにあげる。</p>

<h2>収益はあがるのか</h2>

<p>収益部門が開発部門の舵取りをしやすくなるフレームワークと感じている。</p>

<h2>雑感</h2>

<ul>
<li>会社を大きくしていく、収益をスケールさせるためには?

<ul>
<li>製品開発?</li>
</ul>
</li>
<li>コンサルティングや(Agileの) 開発はスケール（スケールアウトの方）するのか?

<ul>
<li>スケールアップはする気がするけど</li>
<li>チームでやれるプロジェクトの数は決まっている。何を優先させて何を他に任せるか。</li>
<li>ブティック型（ブランド）で他を売ることができるのか</li>
</ul>
</li>
<li>なぜエンジニアの力量は一緒だけど、アメリカは強いのか

<ul>
<li>マーケティング、セールスの強さかな。。。</li>
</ul>
</li>
<li>プロセスはやはり、世の中にあるものをベースとしつつ、自分達でカスタマイズするのが基本。網羅は大変。何を採用するか、しないかは自分達で決める必要がある。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SGT2014 why do we use scrum]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/why-do-we-use-scrum/"/>
    <updated>2014-01-16T20:10:03+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/why-do-we-use-scrum</id>
    <content type="html"><![CDATA[<p>DeNAの方の講演のメモ。少し遅れて参加したため、知花さんの講演しか聴けなかった。</p>

<ul>
<li>知花 里香氏</li>
<li>貝瀬 岳志氏</li>
</ul>


<p>失敗談をベースに話している</p>

<!--more-->


<h2>失敗1: 細かい質問に対応できない</h2>

<ul>
<li>最適なサイクルは? といった、実務上の細かい質問に対応できない。</li>
</ul>


<p>細かい質問を解決するのがScrum Masterの仕事ではなくて、ガイド役
安易にSprintを開始してはならない、というのは確かにそうだろう。自分達でやってはいけないことリストを作るとよいかもしれない。</p>

<h2>失敗2: POがPOの仕事ができない</h2>

<p>チームでビジョンが明確になっていない。チームでビジョンを作る必要がある。
チームビジョンをどう作るか。</p>

<ul>
<li>GROWモデル &ndash; Goal Reallity(現状) Option Will（将来）</li>
</ul>


<p>GROWという考え方は初耳だったが、現状とゴールとその先、と理解するとしっくりきた。
最終的なプロジェクトのアウトプットは、さらに上位のレベルの要求と合致していなければならないと思う。
ただ、オプションやゴールの設定は、チームにまかせることができる。方向性と、どこまでがチームの管轄か、という両方を
表しているという点が良さそうに思え、試して見たい方法だった。</p>

<p>実際にプロジェクトを運営していても、ロードマップ（マイルストーン）の合意と、その到達点（何ができていればいいのか？）は明確にしなければならない。その先や現状というのは、方向性を確認するために必要だ。</p>

<p>日常的にチームを運営するという観点からは、チームルールの定義も必要だと思った。</p>

<h2>失敗3: Scrumに固執する</h2>

<ul>
<li>Scrumを押しつけない</li>
</ul>


<p>問題解決を図るのが目的であって、Scrumを行うのが目的ではない。
ただ、よく分からないときの導きとして、テンプレートとしての「典型的な」手法があってもいいかもしれない。</p>

<h2>Summary</h2>

<ul>
<li>課題の本質を見失わない</li>
<li>あるべき論が先行してしまってはダメ</li>
<li>ビジョン合意なくしてチーム運営を始めない</li>
<li>スクラム屋にならない</li>
</ul>


<h2>INFO</h2>

<ul>
<li>Scrum master&rsquo;s night というイベントをやる予定。facebookにページを作ったそう。</li>
</ul>


<h2>Star Map</h2>

<p>プロジェクトに必要なスキルと、それを保有しているかどうかのマトリクス。
スキルのトランスファー、やりたいかやりたくないかということを可視化する。これも初めて聞いた。
スキル不足 = プロジェクトリスクでもあり、改善を図るポイントでもあるが、プロジェクトとして
抜けているスキルを、自発的に埋めたいかどうかというのは確認のポイントとして考えたことはなかった。
インフラが好きな人もいれば、UIが好きって人もいるしね。</p>

<h2>雑感</h2>

<ul>
<li>Sprintの適切なサイズはなんだろう?

<ul>
<li>実際にやってみた感想としては、一週間は短すぎる。日本は祝日が多いので、一週間は短くなることがある
(1日休みがあると、20%が作業時間から消える)</li>
<li>2週間だと、1日は10%。よくあるルールとして、遅延が10%以上になると警告とするというルールがあるが、
2週間に1日休みがあると、丁度遅延ぎりぎりのバッファを含んだ数値となる。</li>
<li>2週間1サイクルとして、1日はバッファ、休日、レトロスペクティブとすると丁度よさそう。</li>
</ul>
</li>
</ul>


<p>目に見える進捗が必要。これは、何でもいい。Information Radiatorとしての道具は、なんでもいいが、
皆が見えて更新しないと気持ち悪いという状態にしなければならないなと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SGT2014 Mike Beedle基調講演]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/sgt2014-mike-beedle/"/>
    <updated>2014-01-16T19:37:09+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/sgt2014-mike-beedle</id>
    <content type="html"><![CDATA[<p>Scrum Gathering Tokyo 2014に参加してきた。</p>

<p>Mike Beedleの基調講演のメモ。</p>

<p>仕事をしながらメモをとったのと、英語力に自信があんまりないので、聞き取りミスや思い込みがあるかもしれない。
パラメーター化したScrumを様々な領域に適用しようというアイディアはなるほど！と思った。</p>

<!--more-->


<p></p>

<h1>Mike Beedleの経歴</h1>

<ul>
<li>use Scrum from 1995</li>
<li>use Enterprise Scrum from 1996</li>
<li>CEO/CPO of <a href="http://www.newgovernance.com/">New Governance Inc</a>

<ul>
<li>Scrumによってマネージされる会社</li>
</ul>
</li>
<li>IBMも顧客の一つ。IDEFを進めていたが、Scrumを採用するようになった。</li>
</ul>


<h1>Scrumが何故重要か</h1>

<h2>市場環境の変化</h2>

<ul>
<li>Exponetial &ndash; 市場の変化は幾何級数的</li>
<li>inputの増加は、responseにかかる時間の減少を意味する。</li>
</ul>


<p>市場の変化はどんどん速度を増していて、ますます素早い対応が求められている。</p>

<h2>勝利者の一人勝ち</h2>

<ul>
<li>勝者はより早くイノベーションを起こす</li>
<li>勝者の得る収入・利益が、イノベーションの源泉になる

<ul>
<li>その差は1200倍にもなる&hellip;</li>
</ul>
</li>
<li>そのため、素早く企業変革を行う必要がある &ndash;> Enterprise Scrumの必要性</li>
</ul>


<p>最初の勝者が他者の追随を許さない状況になってきている。素早く小さい勝利が、その後のおおきな利益を生む。</p>

<h2>Scrumの成功例</h2>

<ul>
<li>William Mercer &ndash; 5800億ドルのプロジェクト see. <a href="http://scrum.jeffsutherland.com/2010/08/mike-beedle-on-early-history-of-scrum.html">http://scrum.jeffsutherland.com/2010/08/mike-beedle-on-early-history-of-scrum.html</a></li>
<li>Nike Securities &ndash; 金融商品の開発 see. <a href="http://ootips.org/yonat/Scrum.pdf">http://ootips.org/yonat/Scrum.pdf</a></li>
</ul>


<h2>Scrum as Pattern</h2>

<p>Scrumをパターンとみなして、ソフトウェア開発以外にも適用する。</p>

<ul>
<li><a href="http://www.jeffsutherland.org/objwld98/scrum_pattern.html">http://www.jeffsutherland.org/objwld98/scrum_pattern.html</a></li>
<li><a href="http://www.scrumplop.org/">ScrumPLoP</a></li>
</ul>


<h1>Enterprise Scrum</h1>

<p>Scrumは将来的にはシステム開発の手法というだけではなく、マネージメント手法になるだろう、と予測。
Enterprise Scrumは、Scrumを抽象化して、マネージメント手法としてScrumを適用するものである。</p>

<ul>
<li>For Business</li>
<li>Multiple Levels</li>
<li>Scale</li>
</ul>


<h2>For Business</h2>

<p>ビジネスの文脈で、Backlogの優先度を付ける。BlueOceanについて言及していたが、聞き取れなかった。。。
後でプレゼンテーションを見直そう。</p>

<h2>Multiple Levels</h2>

<p>ビジネス文脈にあわせてScrumのやり方 &ndash; たとえば開発対象、スプリント、Scrum master, Product Ownerといった
個人のロールを、組織や役割といった組織に置き換えて考える。</p>

<h2>Scale</h2>

<p>Scrumを再帰的に組織全体に広げるもの。</p>

<h2>Backlog</h2>

<p>このように多階層のScrum適用においては、Backlogのリンクが重要になる。上位のScrumのBacklogは、下位のScrumのBacklogに分解される。したがって、Backlogは階層を持つ。
また、入れ子構造は、製品、意思決定にも適用される。</p>

<h2>Backlog Development</h2>

<p>結構シンプルなアイディア</p>

<ul>
<li>最初はハイレベルなEpicレベルで考え、プライオリティを付ける</li>
<li>次にローレベルなBacklogレベルで考え、プライオリティを付ける。ここで、見積を行う。</li>
<li>ローレベルBacklogの承認は、ハイレベルPOが行う。</li>
<li>それぞれのチームが自分でサイズ見積を行い、全体のバックログにフィードバックする</li>
</ul>


<p>ふと思ったのは、小規模組織では、このような階層をもてず、いくつかの並行で走るSpringのBacklogが混在することが考えられる。
実際のプロジェクトをやりつつ、会社の変革のためのタスクも実施することになる。
（例えば、会社のイメージ変革のスプリントがあるとして、その個々のタスクを実行するメンバーは、開発メンバーと重なっているということは考えられる）</p>

<p>そうなると、リソースがバッティングして、複数のタスクを抱えるようなケースが出てくるのでは？</p>

<h2>Velocity</h2>

<ul>
<li>グローバルベロシティと、ローカルベロシティ</li>
<li>グローバルはハイレベルのスプリント</li>
<li>ローカルは自分のチームのスプリント</li>
</ul>


<p>Sprint = Backlog / Velocity は変わらない。</p>

<p>毎日すべてを統合してテストを行う &ndash; どうやって??</p>

<h2>Abbot?</h2>

<p>何のことか不明。あとでプレゼンテーション見直そう。</p>

<p>全てのプロジェクトに必要
* ブルーオーシャン戦略
* 製品テスト
* ?</p>

<h1>雑多なMemo</h1>

<ul>
<li>Future of Managementである。実践的な証跡もある。

<ul>
<li>どういう意味か。組織の様々なレベルに柔軟に対応できる柔軟性</li>
<li>ビジネスプロセスの取込？</li>
<li>スケーラブル &ndash; これはチームの人数か?</li>
</ul>
</li>
<li>Managementというからには、ビジネスとのリンクが必要である。プロジェクトをどのようにIT戦略の中に位置づけるのか

<ul>
<li>これはPMIの問題認識と共通である。プロジェクトをどのように位置づけるか、ということを考えるようになってきている。</li>
<li>プロジェクトがうまくいくということと、ビジネスの目標がリンクしていなければいけないということ。</li>
</ul>
</li>
<li>Scrumでどうやって経営しているのか?</li>
</ul>


<p>&ldquo;it is not necessary to change. Because survive is not mandatory&rdquo; &ndash; Edward Demming</p>
]]></content>
  </entry>
  
</feed>
