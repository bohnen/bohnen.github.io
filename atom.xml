<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Project Manager's note]]></title>
  <link href="http://bohnen.github.io/atom.xml" rel="self"/>
  <link href="http://bohnen.github.io/"/>
  <updated>2014-01-18T22:15:43+09:00</updated>
  <id>http://bohnen.github.io/</id>
  <author>
    <name><![CDATA[bohnen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rsecメモ]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/18/how-to-use-rsec/"/>
    <updated>2014-01-18T19:22:00+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/18/how-to-use-rsec</id>
    <content type="html"><![CDATA[<p>sqlの簡単な解析を行ったときに<a href="https://github.com/luikore/rsec">Rsec</a> を使ったので、そのメモ。
Rsecは2年ほど前から更新されていないが、コンパクトで使いやすいし、動かしながら慣れていけるのが良い。</p>

<!--more-->


<h2>インストール</h2>

<p>Ruby 1.9用とあるが、2.0でも利用できた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install rsec
</span></code></pre></td></tr></table></div></figure>


<h2>使い方</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rsec&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="ss">Rsec</span><span class="p">:</span><span class="ss">:Helper</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、<a href="http://rsec.heroku.com/ref">http://rsec.heroku.com/ref</a> にあるようなDSLが利用できるようになる。これだけでも簡単な処理には十分。</p>

<h2>パターンマッチ</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">regex_match</span>  <span class="o">=</span> <span class="sr">/\w+/</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="n">string_match</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="n">number_match</span> <span class="o">=</span> <span class="n">prim</span> <span class="ss">:int32</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regexや文字列に追加される .r メソッドを呼ぶことで、Rsecのパターンを作ることができる。マッチすると、マッチした文字列が返る。
ブロックを渡すか、mapメソッドを呼ぶことで、マッチしたときのアクションを変更できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="p">{</span><span class="ss">:matched</span> <span class="o">=&gt;</span> <span class="n">s</span><span class="p">}}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:matched</span> <span class="o">=&gt;</span> <span class="s2">&quot;test&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>文字列のパースは parseもしくは parse!。失敗したときの挙動がことなる。失敗したときにどの解析に失敗したかを分かりやすく
するために、failメソッドを使う。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">fail</span> <span class="s1">&#39;abc&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;ab&#39;</span>
</span><span class='line'><span class="no">INVALID_TOKEN</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse!</span> <span class="s1">&#39;ab&#39;</span>
</span><span class='line'><span class="k">in</span> <span class="ss">source</span><span class="p">:</span><span class="mi">1</span> <span class="n">at</span> <span class="mi">1</span><span class="p">,</span> <span class="n">expect</span> <span class="n">token</span> <span class="o">[</span> <span class="n">abc</span> <span class="o">]</span>
</span><span class='line'><span class="n">ab</span>
</span><span class='line'> <span class="o">^</span>
</span></code></pre></td></tr></table></div></figure>


<h2>組み合わせ</h2>

<p>上記の基本的なパターンを組み合わせて、より複雑なパターンを構成できる。まずは最も基本的な、連接。
連接はseqを使う。seqはデリミタなし。seq_は、デフォルトで空白をデリミタとする。skip: でデリミタを指定できる。
マッチした配列を返す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">seq_</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="p">,</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="ss">skip</span><span class="p">:</span> <span class="s1">&#39;;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;a;b;c&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2項の繰り返しは、joinを使っても書ける。これは、 a, b, c, &hellip;といった任意個数の連接の解析に使える。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="sr">/[\w\* ]+/</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;root:*:0:0:System Administrator&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;root&quot;</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;:&quot;</span><span class="p">,</span> <span class="s2">&quot;System Administrator&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>選択は &ldquo;|&rdquo; を使う。選択は左から順に試されることに注意</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;aaa&#39;</span><span class="o">.</span><span class="n">r</span> <span class="o">|</span> <span class="s1">&#39;aa&#39;</span><span class="o">.</span><span class="n">r</span> <span class="o">|</span> <span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;aa&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s1">&#39;aa&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">r</span> <span class="o">|</span> <span class="s1">&#39;aa&#39;</span><span class="o">.</span><span class="n">r</span> <span class="o">|</span> <span class="s1">&#39;aaa&#39;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;aa&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s1">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>繰り返しは .star 、または *(n) を使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">star</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;aaa&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;a&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">r</span> <span class="o">*</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;aaaaa&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t2</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t2</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;aaaaa&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;aaaaa&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>選択</h1>

<p>基本的にマッチしたすべての箇所が配列で返るのだが、それをいちいち[n]やブロックで必要なところだけとるのは面倒なので、
簡略記法がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">one_of</span><span class="p">(</span><span class="s1">&#39;+-&#39;</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="sr">/\d+/</span><span class="o">.</span><span class="n">r</span> <span class="c1"># one_ofはどれか一文字の選択。 &gt;&gt; は、右辺の結果のみを返す</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;+1234&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;1234&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;(&#39;</span><span class="o">.</span><span class="n">r</span> <span class="o">&gt;&gt;</span> <span class="sr">/\w+/</span><span class="o">.</span><span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;)&#39;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;(  test  )&#39;</span> <span class="c1"># &lt;&lt;は、空白を無視する</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>joinでは、繰り返しの左側、右側のみを取得する .odd, .even がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="sr">/[\w\* ]+/</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">even</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;root:*:0:0:System Administrator&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;root&quot;</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;System Administrator&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="s1">&#39;:&#39;</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="sr">/[\w\* ]+/</span><span class="p">)</span><span class="o">.</span><span class="n">odd</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">parse</span> <span class="s1">&#39;:root:*:0:0:System Administrator:&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;root&quot;</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;System Administrator&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Gist</h2>

<p>基本は上記の通りで、それをベースにcreate table文(db2)をパースして、属性とその型の一覧を出力するサンプル</p>

<div><script src='https://gist.github.com/8488424.js?file=tableparse.rb'></script>
<noscript><pre><code># coding: utf-8
require &#39;rsec&#39;

class TableParser
  include Rsec::Helper

  def initialize
    generate_parser
  end

  def parse str
    begin
      @query.parse! str
    rescue =&gt; e
      p e
    end
  end

  def generate_parser
    token      = /[\w\+]+/.r
    quote      = &#39;&quot;&#39;.r
    sep        = /\s*,\s*/.r
    qword      = quote.maybe &gt;&gt; token &lt;&lt; quote.maybe
    not_null   = seq_(&#39;NOT&#39;,&#39;NULL&#39;).maybe{|v| true unless v.empty?}
    tokens     = token.join(/\s*/).fail &#39;tokens&#39;
    qwords     = qword.join(/\s*/).fail &#39;qwords&#39;
    options    = seq_(&#39;(&#39;, tokens, &#39;)&#39;).fail &#39;options&#39;
    
    params     = seq_(tokens,options.maybe).fail &#39;params&#39;
    column_def = seq_(qword,type,not_null) &lt;&lt; params.maybe
    column_defs = &#39;(&#39;.r &gt;&gt; column_def.join(sep).even &lt;&lt; &#39;)&#39;.r
    table_name = seq(qword, &#39;.&#39;, qword)[2] | qword
    table_def  = &#39;CREATE&#39;.r &gt;&gt; &#39;TABLE&#39; &gt;&gt; table_name
    @query = seq_(table_def, column_defs,qwords.maybe, &#39;;&#39;){|t,c|
      {:table_name =&gt; t, :column_def =&gt; c}
    }
  end

  def solo type
    solo   = seq_(&#39;(&#39;, prim(:int64), &#39;)&#39;).map(&amp;:join)
    seq_(type, solo).map(&amp;:join)
  end

  def pair type
    number = prim :int64
    pair   = seq_(&#39;(&#39;, number, &quot;,&quot; ,number, &#39;)&#39;).map(&amp;:join)
    seq_(type,pair).map(&amp;:join)
  end

  def type
    type = &#39;SMALLINT&#39;.r | &#39;INTEGER&#39;.r | &#39;INT&#39;.r | &#39;BIGINT&#39;.r |
            &#39;DATE&#39;.r | &#39;TIME&#39;.r | &#39;TIMESTAMP&#39;.r |
            &#39;BINARY LARGE OBJECT&#39;.r | 
            solo(&#39;VARCHAR&#39;) | solo(&#39;CHAR&#39;) | solo(&#39;VARGRAPHIC&#39;) | solo(&#39;BLOB&#39;) |
            pair(&#39;NUMERIC&#39;) | pair(&#39;DECIMAL&#39;)
    type.fail &#39;type&#39;
  end

  def format result, sort = true
    id_length = 50
    type_length = 20
    null_length = 10
    total_length = id_length + type_length + null_length +2

    puts &quot;[ #{result[:table_name]} ]&quot;.center(total_length)
    puts &quot;-&quot;*(total_length)
    puts [&quot;ID&quot;.center(id_length),&quot;TYPE&quot;.center(type_length),&quot;NOT NULL&quot;.center(null_length)].join(&quot;|&quot;)
    puts &quot;-&quot;*(total_length)
    result[:column_def].sort!{|x,y| x[0] &lt;=&gt; y[0]} if sort
    result[:column_def].each do |col|
      n = col[2] == true ? &quot;YES&quot; : &quot;NO&quot;
      puts [col[0].ljust(id_length), col[1].ljust(type_length), n.ljust(null_length)].join(&quot;|&quot;)
    end
    puts 
  end
end

if __FILE__ == $PROGRAM_NAME
  require &#39;pp&#39;

  if ARGV.count &gt; 0 then
    match = ARGF.read.scan(/CREATE TABLE.*?;/m)
    match.sort!
    match.each do |m|
      t = TableParser.new
      t.format(t.parse(m))
    end
  else
    t = TableParser.new
    p t.parse &#39;CREATE TABLE &quot;SCHEMA&quot;.&quot;TABLE_NAME&quot; ( &quot;ID&quot; INT NOT NULL AUTOGEN, 
                                                   &quot;NAME&quot; VARCHAR(10) NOT NULL,
                                                   &quot;UPD_TIME&quot; TIMESTAMP ) IN &quot;TBLSPACE&quot;;&#39;
  end
end
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLのパース]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/17/parse-create-table/"/>
    <updated>2014-01-17T20:48:03+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/17/parse-create-table</id>
    <content type="html"><![CDATA[<p>ALTERやらCREATE TABLEやらCREATE INDEXやらがごちゃ混ぜになったDDLファイルから、
CREATE TABLEだけを引っこ抜き、それぞれの属性の名称と型を調べる必要に迫られた。</p>

<p>SQLの解析はちょっと面倒で、特に、型がそれぞれパターンが異なることから、パーサー使わないといけないと
思い立ち、そこからRubyのパーサライブラリ探索の旅が始まるのであった。</p>

<!--more-->


<h2>CREATE TABLE文の抜き出し</h2>

<p>なにはともあれCREATE TABLE文だけを抽出しなければいけないが、これは最短マッチを使うことですんなり行く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="o">=</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">read</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/CREATE TABLE.*?;/m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>parslet と Rsec</h2>

<p>今回はパーサライブラリとして、使うのが簡単そうな <a href="http://kschiess.github.io/parslet/install.html">parslet</a>を
使ってみる。</p>

<p>と、思ったんだけど、途中で<a href="https://www.ruby-forum.com/topic/3444183">こんなスレ</a>を見つけてしまい、速いと評判だった
<a href="https://github.com/luikore/rsec">Rsec</a> を使って書くことにした。</p>

<p>くせがあって慣れるのが大変だったんだけど、慣れたら全然使い易い。Rsecの使い方はメモしておかないと忘れそうだ。
明日にでも書こう。</p>

<h2>PEG (Parsing Expression Grammer)</h2>

<p>パーサージェネレーターとか触るの10年ぶりくらいだったので、Rsecのようにプログラム中にごりごり書けるのは衝撃だった。
それ以上に、PEGが何かが分かっていなくて、/[^,]*/ でマッチするようなルールを書いてしまい、「あっれー？おかしいな、
どんなルールを書いても末尾まで読んでしまってSyntax error吐いちゃう・・・」みたいなことで頭を悩ませていた。</p>

<p>PEGの &ldquo;|&rdquo; は左から実行され、失敗したらバックトラックして右側に進んでいく。</p>

<p>これだけ分かると、後は簡単。汎用的なマッチほど、後ろに書けばいいわけだ。
例えばCHARは CHARACTERでもいいけど、この場合は &lsquo;CHARACTER&rsquo;.r | &lsquo;CHAR&rsquo;.r と書かないと、先にCHARにマッチしてしまって
そちらで評価されることになる。（それを防ぐ為の word(&lsquo;CHAR&rsquo;)という書き方もあって、これだと単語として独立していないとマッチしない）</p>

<p>PEGをベースにしたパーサーはずいぶん使いやすい。何より書いてすぐ試行錯誤できるのがいい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blog with octopress]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/blog-with-octopress/"/>
    <updated>2014-01-16T22:01:32+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/blog-with-octopress</id>
    <content type="html"><![CDATA[<p>blogをgithub pagesとoctopressでつけはじめたので、そのメモ。</p>

<!--more-->


<h1>インストール</h1>

<p>まず、github pagesの準備。&lt;ユーザー名>.github.io というリポジトリを作成しておく。</p>

<h2>Otcopressインストール</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/imathis/octopress.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class='line'><span class="nv">$ </span>gem install bundler <span class="c"># 元々入っていたのでやってない</span>
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake install <span class="c"># デフォルトテーマのインストール</span>
</span></code></pre></td></tr></table></div></figure>


<h2>github pages対応</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>ここで、github pagesのURLを聞かれるので、&lt;ユーザー名>.github.io リポジトリの git: か <a href="https:">https:</a> のURLを入力</p>

<h2>ページ生成</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake generate
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>ここで localhost:4000 にアクセスすると、初期ページが見える。</p>

<h1>テーマのインストール</h1>

<p>デフォルトのテーマは暗くてちょっと嫌だったので、<a href="http://opthemes.com/">ここ</a> から、octostrap3というテーマをチョイス。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/kAworu/octostrap3 .themes/octostrap3
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake install<span class="o">[</span><span class="s1">&#39;octostrap3&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>bundle generate
</span></code></pre></td></tr></table></div></figure>


<h1>記事を書く</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake new_post<span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>プレビュー</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake generate
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>サーバが立ち上がっているときに記事を編集すると、勝手にgenerateしてくれる。</p>

<h1>デプロイ</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h1>コミット</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;hoge&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span> <span class="c"># bundle exec rake push でもいいのかな...?</span>
</span></code></pre></td></tr></table></div></figure>


<h1>おまけ</h1>

<ul>
<li>sublime Text2でmarkdownを編集するいいプラグインがないかなと思って、markdowneditingを最初に試したが、
日本語入力のときに改行が入ることがあって結局使わないことにした。</li>
<li>現在はmarkdown extendedを使っている。</li>
</ul>


<h1>参考文献</h1>

<ol>
<li><a href="http://octopress.org/">octopress</a></li>
<li><a href="http://melborne.github.io/2012/05/13/first-step-of-jekyll/">30分のチュートリアルでJekyllを理解する</a></li>
<li><a href="http://sublimetext-markdown.github.io/MarkdownEditing/#gfm-spesific-features">markdownediting</a></li>
<li><a href="https://github.com/jonschlinkert/sublime-markdown-extended">markdown Extended</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STG2014 Scrumで売上があがるのか]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/stg2014-scrum-for-s-sales/"/>
    <updated>2014-01-16T20:23:39+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/stg2014-scrum-for-s-sales</id>
    <content type="html"><![CDATA[<p>シャノン 堀 譲治氏 の講演のメモ</p>

<!--more-->


<h2>シャノン</h2>

<ul>
<li>マーケティングプラットフォームの開発</li>
<li>キャンペーン管理のシステム</li>
<li>マーケティング管理市場(???) でトップシェア</li>
<li>毎年140%成長</li>
</ul>


<h2>Scrum導入の理由</h2>

<ul>
<li>売上に対する開発コストを徐々に減らして、営業・マーケティング費用に充てたい</li>
</ul>


<h2>Scrumのメリット</h2>

<ul>
<li>売上が早く計上できる。

<ul>
<li>SIからしてみると、顧客に売上のタイミングはゆだねられる。作成側の売上計上タイミングは、契約によって異なる。
　（イテレーション毎に売上が立たないようでは、契約としてのメリットはないかも）</li>
</ul>
</li>
<li>顧客接点の増加

<ul>
<li>頻繁なリリースは、顧客との接点を増加させる。（この発想が営業だな）</li>
</ul>
</li>
<li>人員コストの平準化

<ul>
<li>ビッグバンリリースだとテスト人員の偏りが出てしまう。</li>
<li>in-house developmentならできそう。</li>
<li>顧客がテストレポートを求めているときに、テストを平準化することが可能か?</li>
</ul>
</li>
<li>プロジェクトの中断が容易

<ul>
<li>ビッグプロジェクトの中断は実際困難</li>
<li>イテレーション毎に意思決定を導入できる。これも、受注側にとっては、厳しい条件だ。</li>
<li>失敗プロジェクトを止めるというよりは、より儲かるプロジェクトに投資する</li>
</ul>
</li>
</ul>


<h2>事業の失敗</h2>

<ul>
<li>開発、役員、営業・マーケ。開発で決まることは殆どない（開発のコスト超過、機能未達がクリティカルになることはない）</li>
</ul>


<h2>POの失敗</h2>

<ol>
<li><p>顧客課題にフォーカスしていない
 課題が何かを把握するのは難しい。ついつい機能の話をしがち。機能で合意をとるのではなく、やりたいことで合意をとる。
 基本設計というフェーズは完全に顧客にとって意味がないものとなっていないだろうか。
 顧客が欲しいもの = 要件と、機能のトレースができなければ、顧客に基本設計をレビューしてもらうことはできっこない。</p></li>
<li><p>声の大きい顧客を優先してしまう。</p></li>
<li><p>優先度の決め方に責任感がない。決めた優先度に誰も責任をとらない。
 意思決定と責任は表裏一体。多数決による決定では、責任を負わなくなってしまう。やはりリスクをとってリターンをとるという姿勢を持つ人が責任を持たなければ。</p></li>
<li><p>収益シナリオを把握していない</p></li>
<li><p>顧客の導入障壁を理解していない
 製品を使うための障壁（トレーニング、使い安さ、マニュアル、システム移行）に気が回らない。企画段階に盛り込めていない</p></li>
<li><p>開発は管理しているのに、企画は管理していない
 プロジェクトの企画も開発並みにキッチリしなければいけない。すぐオーバーコミットに。
 SIでいえば、企画書、提案書なので、そのプロセスは重要だ。企画書をどう書くか、都度、同じことの繰り返しは嫌だな。
 前提条件や、非機能要件のテンプレート化、進捗や体制の前提を整理しておきたい。企画書に盛り込めるだけ盛り込め！</p></li>
<li><p>技術的負債を無視している
 技術的負債のメリットをどうとらえるかという問題。 <strong> 一定量をリファクタリングとして確保する。</strong>
 リファクタリングだけのプロジェクトはやらない。</p></li>
</ol>


<p>プロダクトバックログはPOが確認して、腹落ちしてからバックログにあげる。</p>

<h2>収益はあがるのか</h2>

<p>収益部門が開発部門の舵取りをしやすくなるフレームワークと感じている。</p>

<h2>雑感</h2>

<ul>
<li>会社を大きくしていく、収益をスケールさせるためには?

<ul>
<li>製品開発?</li>
</ul>
</li>
<li>コンサルティングや(Agileの) 開発はスケール（スケールアウトの方）するのか?

<ul>
<li>スケールアップはする気がするけど</li>
<li>チームでやれるプロジェクトの数は決まっている。何を優先させて何を他に任せるか。</li>
<li>ブティック型（ブランド）で他を売ることができるのか</li>
</ul>
</li>
<li>なぜエンジニアの力量は一緒だけど、アメリカは強いのか

<ul>
<li>マーケティング、セールスの強さかな。。。</li>
</ul>
</li>
<li>プロセスはやはり、世の中にあるものをベースとしつつ、自分達でカスタマイズするのが基本。網羅は大変。何を採用するか、しないかは自分達で決める必要がある。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SGT2014 why do we use scrum]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/why-do-we-use-scrum/"/>
    <updated>2014-01-16T20:10:03+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/why-do-we-use-scrum</id>
    <content type="html"><![CDATA[<p>DeNAの方の講演のメモ。少し遅れて参加したため、知花さんの講演しか聴けなかった。</p>

<ul>
<li>知花 里香氏</li>
<li>貝瀬 岳志氏</li>
</ul>


<p>失敗談をベースに話している</p>

<!--more-->


<h2>失敗1: 細かい質問に対応できない</h2>

<ul>
<li>最適なサイクルは? といった、実務上の細かい質問に対応できない。</li>
</ul>


<p>細かい質問を解決するのがScrum Masterの仕事ではなくて、ガイド役
安易にSprintを開始してはならない、というのは確かにそうだろう。自分達でやってはいけないことリストを作るとよいかもしれない。</p>

<h2>失敗2: POがPOの仕事ができない</h2>

<p>チームでビジョンが明確になっていない。チームでビジョンを作る必要がある。
チームビジョンをどう作るか。</p>

<ul>
<li>GROWモデル &ndash; Goal Reallity(現状) Option Will（将来）</li>
</ul>


<p>GROWという考え方は初耳だったが、現状とゴールとその先、と理解するとしっくりきた。
最終的なプロジェクトのアウトプットは、さらに上位のレベルの要求と合致していなければならないと思う。
ただ、オプションやゴールの設定は、チームにまかせることができる。方向性と、どこまでがチームの管轄か、という両方を
表しているという点が良さそうに思え、試して見たい方法だった。</p>

<p>実際にプロジェクトを運営していても、ロードマップ（マイルストーン）の合意と、その到達点（何ができていればいいのか？）は明確にしなければならない。その先や現状というのは、方向性を確認するために必要だ。</p>

<p>日常的にチームを運営するという観点からは、チームルールの定義も必要だと思った。</p>

<h2>失敗3: Scrumに固執する</h2>

<ul>
<li>Scrumを押しつけない</li>
</ul>


<p>問題解決を図るのが目的であって、Scrumを行うのが目的ではない。
ただ、よく分からないときの導きとして、テンプレートとしての「典型的な」手法があってもいいかもしれない。</p>

<h2>Summary</h2>

<ul>
<li>課題の本質を見失わない</li>
<li>あるべき論が先行してしまってはダメ</li>
<li>ビジョン合意なくしてチーム運営を始めない</li>
<li>スクラム屋にならない</li>
</ul>


<h2>INFO</h2>

<ul>
<li>Scrum master&rsquo;s night というイベントをやる予定。facebookにページを作ったそう。</li>
</ul>


<h2>Star Map</h2>

<p>プロジェクトに必要なスキルと、それを保有しているかどうかのマトリクス。
スキルのトランスファー、やりたいかやりたくないかということを可視化する。これも初めて聞いた。
スキル不足 = プロジェクトリスクでもあり、改善を図るポイントでもあるが、プロジェクトとして
抜けているスキルを、自発的に埋めたいかどうかというのは確認のポイントとして考えたことはなかった。
インフラが好きな人もいれば、UIが好きって人もいるしね。</p>

<h2>雑感</h2>

<ul>
<li>Sprintの適切なサイズはなんだろう?

<ul>
<li>実際にやってみた感想としては、一週間は短すぎる。日本は祝日が多いので、一週間は短くなることがある
(1日休みがあると、20%が作業時間から消える)</li>
<li>2週間だと、1日は10%。よくあるルールとして、遅延が10%以上になると警告とするというルールがあるが、
2週間に1日休みがあると、丁度遅延ぎりぎりのバッファを含んだ数値となる。</li>
<li>2週間1サイクルとして、1日はバッファ、休日、レトロスペクティブとすると丁度よさそう。</li>
</ul>
</li>
</ul>


<p>目に見える進捗が必要。これは、何でもいい。Information Radiatorとしての道具は、なんでもいいが、
皆が見えて更新しないと気持ち悪いという状態にしなければならないなと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SGT2014 Mike Beedle基調講演]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/sgt2014-mike-beedle/"/>
    <updated>2014-01-16T19:37:09+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/sgt2014-mike-beedle</id>
    <content type="html"><![CDATA[<p>Scrum Gathering Tokyo 2014に参加してきた。</p>

<p>Mike Beedleの基調講演のメモ。</p>

<p>仕事をしながらメモをとったのと、英語力に自信があんまりないので、聞き取りミスや思い込みがあるかもしれない。
パラメーター化したScrumを様々な領域に適用しようというアイディアはなるほど！と思った。</p>

<!--more-->


<p></p>

<h1>Mike Beedleの経歴</h1>

<ul>
<li>use Scrum from 1995</li>
<li>use Enterprise Scrum from 1996</li>
<li>CEO/CPO of <a href="http://www.newgovernance.com/">New Governance Inc</a>

<ul>
<li>Scrumによってマネージされる会社</li>
</ul>
</li>
<li>IBMも顧客の一つ。IDEFを進めていたが、Scrumを採用するようになった。</li>
</ul>


<h1>Scrumが何故重要か</h1>

<h2>市場環境の変化</h2>

<ul>
<li>Exponetial &ndash; 市場の変化は幾何級数的</li>
<li>inputの増加は、responseにかかる時間の減少を意味する。</li>
</ul>


<p>市場の変化はどんどん速度を増していて、ますます素早い対応が求められている。</p>

<h2>勝利者の一人勝ち</h2>

<ul>
<li>勝者はより早くイノベーションを起こす</li>
<li>勝者の得る収入・利益が、イノベーションの源泉になる

<ul>
<li>その差は1200倍にもなる&hellip;</li>
</ul>
</li>
<li>そのため、素早く企業変革を行う必要がある &ndash;> Enterprise Scrumの必要性</li>
</ul>


<p>最初の勝者が他者の追随を許さない状況になってきている。素早く小さい勝利が、その後のおおきな利益を生む。</p>

<h2>Scrumの成功例</h2>

<ul>
<li>William Mercer &ndash; 5800億ドルのプロジェクト see. <a href="http://scrum.jeffsutherland.com/2010/08/mike-beedle-on-early-history-of-scrum.html">http://scrum.jeffsutherland.com/2010/08/mike-beedle-on-early-history-of-scrum.html</a></li>
<li>Nike Securities &ndash; 金融商品の開発 see. <a href="http://ootips.org/yonat/Scrum.pdf">http://ootips.org/yonat/Scrum.pdf</a></li>
</ul>


<h2>Scrum as Pattern</h2>

<p>Scrumをパターンとみなして、ソフトウェア開発以外にも適用する。</p>

<ul>
<li><a href="http://www.jeffsutherland.org/objwld98/scrum_pattern.html">http://www.jeffsutherland.org/objwld98/scrum_pattern.html</a></li>
<li><a href="http://www.scrumplop.org/">ScrumPLoP</a></li>
</ul>


<h1>Enterprise Scrum</h1>

<p>Scrumは将来的にはシステム開発の手法というだけではなく、マネージメント手法になるだろう、と予測。
Enterprise Scrumは、Scrumを抽象化して、マネージメント手法としてScrumを適用するものである。</p>

<ul>
<li>For Business</li>
<li>Multiple Levels</li>
<li>Scale</li>
</ul>


<h2>For Business</h2>

<p>ビジネスの文脈で、Backlogの優先度を付ける。BlueOceanについて言及していたが、聞き取れなかった。。。
後でプレゼンテーションを見直そう。</p>

<h2>Multiple Levels</h2>

<p>ビジネス文脈にあわせてScrumのやり方 &ndash; たとえば開発対象、スプリント、Scrum master, Product Ownerといった
個人のロールを、組織や役割といった組織に置き換えて考える。</p>

<h2>Scale</h2>

<p>Scrumを再帰的に組織全体に広げるもの。</p>

<h2>Backlog</h2>

<p>このように多階層のScrum適用においては、Backlogのリンクが重要になる。上位のScrumのBacklogは、下位のScrumのBacklogに分解される。したがって、Backlogは階層を持つ。
また、入れ子構造は、製品、意思決定にも適用される。</p>

<h2>Backlog Development</h2>

<p>結構シンプルなアイディア</p>

<ul>
<li>最初はハイレベルなEpicレベルで考え、プライオリティを付ける</li>
<li>次にローレベルなBacklogレベルで考え、プライオリティを付ける。ここで、見積を行う。</li>
<li>ローレベルBacklogの承認は、ハイレベルPOが行う。</li>
<li>それぞれのチームが自分でサイズ見積を行い、全体のバックログにフィードバックする</li>
</ul>


<p>ふと思ったのは、小規模組織では、このような階層をもてず、いくつかの並行で走るSpringのBacklogが混在することが考えられる。
実際のプロジェクトをやりつつ、会社の変革のためのタスクも実施することになる。
（例えば、会社のイメージ変革のスプリントがあるとして、その個々のタスクを実行するメンバーは、開発メンバーと重なっているということは考えられる）</p>

<p>そうなると、リソースがバッティングして、複数のタスクを抱えるようなケースが出てくるのでは？</p>

<h2>Velocity</h2>

<ul>
<li>グローバルベロシティと、ローカルベロシティ</li>
<li>グローバルはハイレベルのスプリント</li>
<li>ローカルは自分のチームのスプリント</li>
</ul>


<p>Sprint = Backlog / Velocity は変わらない。</p>

<p>毎日すべてを統合してテストを行う &ndash; どうやって??</p>

<h2>Abbot?</h2>

<p>何のことか不明。あとでプレゼンテーション見直そう。</p>

<p>全てのプロジェクトに必要
* ブルーオーシャン戦略
* 製品テスト
* ?</p>

<h1>雑多なMemo</h1>

<ul>
<li>Future of Managementである。実践的な証跡もある。

<ul>
<li>どういう意味か。組織の様々なレベルに柔軟に対応できる柔軟性</li>
<li>ビジネスプロセスの取込？</li>
<li>スケーラブル &ndash; これはチームの人数か?</li>
</ul>
</li>
<li>Managementというからには、ビジネスとのリンクが必要である。プロジェクトをどのようにIT戦略の中に位置づけるのか

<ul>
<li>これはPMIの問題認識と共通である。プロジェクトをどのように位置づけるか、ということを考えるようになってきている。</li>
<li>プロジェクトがうまくいくということと、ビジネスの目標がリンクしていなければいけないということ。</li>
</ul>
</li>
<li>Scrumでどうやって経営しているのか?</li>
</ul>


<p>&ldquo;it is not necessary to change. Because survive is not mandatory&rdquo; &ndash; Edward Demming</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソフトウェア職人気質 ch.6]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/software-craftmanship/"/>
    <updated>2014-01-16T19:31:10+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/software-craftmanship</id>
    <content type="html"><![CDATA[<p>この章では、資格制度がソフトウェア開発に貢献するという仮定がいかに間違っているかを説明している。
資格制度の問題というより、資格制度を実施するほど堅牢な知識の基盤がない、と筆者は主張する。</p>

<p>知識の成熟は浅く、それでいて適用範囲が広すぎるため、「ソフトウェア開発」とひとくくりにした資格制度は意味がないとする。
また、そのような資格が、単に知識を知っているという以上の意味を持たないために、現実の業務で品質の向上に寄与していない点を指摘している。</p>

<!--more-->


<p></p>

<p>職人気質は、そのようなあやふやな基準によらず、個人の推薦を基盤として、すぐれた開発者を識別する。</p>

<p>では、職人気質がソフトウェアの品質にどのように貢献しているのだろうか？
「ソフトウェアの品質に貢献している」というクレジットは明確になり、信頼もできるが、しかし、実際どのような貢献なのであろうか。</p>

<h2>Memo</h2>

<ul>
<li>ソフトウェア工学の資格制度のためには、Body of Knowledgeが必要であるが、<a href="http://www.computer.org/portal/web/swebok">SWEBOK</a> を作成したACMは、資格制度化を見送っている。その理由は:

<ul>
<li> 堅牢なシステムに必要な特殊な知識を外してしまうと、そのようなシステムの開発に必要な重要な知識が排除されることになる</li>
<li> ソフトウェア開発の分野は日進月歩であり、まだまだ工学・プラクティスが成熟していない</li>
</ul>
</li>
<li>2014年現在、SWEBOKはv3のDRAFTを掲載しており、二つの認定試験のベースとなっている。状況は変わってきているのだろうか。</li>
<li>ソフトウェア職人気質は、個人の評判、個人的な推薦に着目する。ハリウッドの人材調達とおなじやり方で、ハリウッド・モデルと呼ぶ</li>
<li>ハリウッド・モデルで検索すると該当するものはなかったのだが、<a href="http://bytepawn.com/2008/07/14/the-hollywood-model-in-software-engineering/">興味深いpost</a> を見つけた</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトRuby ch.15]]></title>
    <link href="http://bohnen.github.io/blog/2014/01/16/perfect-ruby-ch-dot-15/"/>
    <updated>2014-01-16T19:26:26+09:00</updated>
    <id>http://bohnen.github.io/blog/2014/01/16/perfect-ruby-ch-dot-15</id>
    <content type="html"><![CDATA[<p>積ん読になってたパーフェクトRubyを実際にコーディングしながら読み進めてみた。
15章はコマンドラインのTodoアプリケーションの開発だ。</p>

<p>Rubyは初級レベル。awkの代わりにちょっとしたスクリプトを作成するのに使うかという程度の利用しかやってなかったので、Rubyでのアプリケーションの開発は初めて（仕事ではほとんどJavaだし）。</p>

<!--more-->


<h2>ポイント</h2>

<ul>
<li>bundlerによるgemのスケルトンの作成。gemの構造の理解</li>
<li>ActiveRecordによるDB接続と、ORMの提供</li>
<li>OptionParaserによるコマンドライン引数の解析</li>
</ul>


<p>Gemの作り方を学べたのと、OptionParaserでのサブコマンドの作り方を丁寧に書いてあって分かりやすかった。</p>

<h2>Bundler</h2>

<ul>
<li><a href="http://bundler.io/">本家サイト</a></li>
<li>bundlerはrubyのアプリケーションでのgemの依存関係を整理してくれる</li>
<li>gemのスケルトンの生成もやってくれて便利</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; $ bundler gem todo -b </span></code></pre></td></tr></table></div></figure>


<ul>
<li>設定はGemfileに記載。Gemfileから、todo.gemspecを読み込むようだ。</li>
<li>bundle execコマンドで、ruby や rakeなどのコマンドを Gemfile/todo.gemspecを読み込んだ上で実行してくれる。環境依存の情報はこの二つのファイルに書けばよく、アプリケーションコードを汚さない。</li>
<li>開発時に必要だけどプロダクションでは不要といった依存関係も書ける。</li>
</ul>


<h2>ActiveRecord</h2>

<ul>
<li><a href="http://api.rubyonrails.org/files/activerecord/README_rdoc.html">API Document</a></li>
<li>ActiveRecord::Baseを使ってDB接続の作成、テーブルの作成を実施</li>
<li>ActiveRecord::Baseを継承したクラスはテーブルに対応したモデルクラスになる。このときクラス名は単数、テーブル名は複数形というネーミングルール</li>
<li><a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">scope</a> を使って、複雑な条件をまとめた新たな検索メソッドを定義できる。
16章でview側に検索結果を引き渡すときに役立った。</li>
</ul>


<h2>OptionParser</h2>

<ul>
<li><a href="http://guides.rubyonrails.org/active_record_querying.html#copes">API Document</a></li>
<li>サブコマンドの解析はできないので、サブコマンドを解析させるときは、サブコマンド毎にOptionParserのインスタンスを作成する</li>
<li>ヘルプは opt.banner, opt.separator などのメソッドでカスタマイズできる。opt.on で解析するオプションは自動で出力されるが、サブコマンドのヘルプは自動で出力されないので、自分で組み立てて表示する必要がある。</li>
</ul>

]]></content>
  </entry>
  
</feed>
